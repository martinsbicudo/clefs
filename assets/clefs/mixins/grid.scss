//MIXINS GRID
//grids class
@mixin first-content($tag, $i, $only) {
  @if($only) {
    > .clefs:not(.clef, [class*="clef-"], .-only).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > .clefs:not(.clef, [class*="clef-"]).-only.#{$tag}-#{$i} {
      @content;
    }
  }
}
@mixin second-content($tag, $i, $only) {
  @if($only) {
    > :not(.clefs, .-only):matches(.clef, [class*="clef-"]).#{$tag}-#{$i},
    > .clefs:not(.clef, [class*="clef-"], .-only).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > :not(.clefs):matches(.clef, [class*="clef-"]).-only.#{$tag}-#{$i},
    > .clefs:not(.clef, [class*="clef-"]).-only.#{$tag}-#{$i} {
      @content;
    }
  }
}
@mixin third-content($tag, $i, $only) {
  @if($only) {
    > .clefs:not(.-only):matches(.clef, [class*="clef-"]).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > .clefs:matches(.clef, [class*="clef-"]).-only.#{$tag}-#{$i} {
      @content;
    }
  }
}

//grid style only
@mixin grid-style($tag, $i, $columns, $space, $only) {
  //------------ CONFLICT CORRECTION
  //conflict correction with auto width .clefs
  @include first-content($tag, $i, $only){
    min-width: auto !important;
  }
  //------------ /CONFLICT CORRECTION

  @include second-content($tag, $i, $only) {
    flex: 1 0 calc((100% / #{$columns} * #{$i}));
    max-width: calc((100% / #{$columns} * #{$i}));
  }
  @include third-content($tag, $i, $only){
    flex: 1 0 calc((100% / #{$columns} * #{$i}) + #{$space});
    max-width: calc((100% / #{$columns} * #{$i}) + #{$space});
  }
}

//grid queries
@mixin grid-query($tag, $values, $only: false) {
  $columns: map-get($values, columns);
  $space: map-get($values, space);
  $tags: map-get($values, tags);
  $i: index(map-keys($tags), $tag);

  .clefs:not(.-claviers) {
    //widths specifics
    @for $i from 1 through $columns {
      @include grid-style($tag, $i, $columns, $space, $only);
    }
  }
}

//get queries between
@mixin grids-between($name, $tags) {
  $next: getNextQuery($name, map-keys($tags));

  @if( $next ) {
    @include query-between($name, $next, $tags) {
      @content;
    }
  }@else{
    @include query-min($name, $tags) {
      @content;
    }
  }
}

@mixin grids-min($name, $tags) {
  @include query-min($name, $tags) {
    @content;
  }
}

//aply grids
@mixin aply-grids($values) {
  $tags: map-get($values, tags);
  $tags: mapSort($tags, map-values($tags));
  @each $tag in map-keys($tags) {
    @include grids-between($tag, $tags) {
      @include grid-query($tag, $values);
    }
    @include grids-min($tag, $tags) {
      @include grid-query($tag, $values, true);
    }
  }
}

//enable grid components
@mixin grid($values) {
  //GET VALUES
  $space: map-get($values, space);
  $columns: map-get($values, columns);
  $tags: map-get($values, tags);
  $enable: map-get($values, enable);
  $enables: map-get($values, enables);

  //ENABLES
  $aligns: map-get($enables, aligns);
  $auto: map-get($enables, auto);
  $cols: map-get($enables, cols);
  $debug: map-get($enables, debug);
  $grids: map-get($enables, grids);
  $max: map-get($enables, max);
  $offset: map-get($enables, offset);
  $order: map-get($enables, order);
  $responsive: map-get($enables, responsive);

  /*GRID*/
  @if($aligns){@include aligns;}
  @if($auto){@include auto($columns);}
  @if($cols){@include cols($space, $columns);}
  @if($debug){@include debug($space);}
  @if($grids){@include grids($space);}
  @if($max){@include max($columns);}
  @if($offset){@include offset($columns);}
  @if($order){@include order($columns);}
  @if($responsive){@include responsive($values);}
  /* /GRID*/
}
// /MIXINS GRID
