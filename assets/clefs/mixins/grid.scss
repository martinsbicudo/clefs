//MIXINS GRID
//grids class
@mixin first-content($tag, $i, $type) {
  @if not($type) {
    > .clefs:not(.clef, [class*="clef-"], .-greater, .-lesser).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > .clefs:not(.clef, [class*="clef-"]).-#{$type}.#{$tag}-#{$i} {
      @content;
    }
  }
}
@mixin second-content($tag, $i, $type) {
  @if not($type) {
    > :not(.clefs, .-greater, .-lesser):matches(.clef, [class*="clef-"]).#{$tag}-#{$i},
    > .clefs:not(.clef, [class*="clef-"], .-greater, .-lesser).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > :not(.clefs):matches(.clef, [class*="clef-"]).-#{$type}.#{$tag}-#{$i},
    > .clefs:not(.clef, [class*="clef-"]).-#{$type}.#{$tag}-#{$i} {
      @content;
    }
  }
}
@mixin third-content($tag, $i, $type) {
  @if not($type) {
    > .clefs:not(.-greater, .-lesser):matches(.clef, [class*="clef-"]).#{$tag}-#{$i} {
      @content;
    }
  }@else{
    > .clefs:matches(.clef, [class*="clef-"]).-#{$type}.#{$tag}-#{$i} {
      @content;
    }
  }
}

//grid style only
@mixin grid-style($tag, $i, $columns, $space, $type) {
  //------------ CONFLICT CORRECTION
  //conflict correction with auto width .clefs
  @include first-content($tag, $i, $type){
    min-width: auto !important;
  }
  //------------ /CONFLICT CORRECTION

  @include second-content($tag, $i, $type) {
    flex: 1 0 calc((100% / #{$columns} * #{$i}));
    max-width: calc((100% / #{$columns} * #{$i}));
  }
  @include third-content($tag, $i, $type){
    flex: 1 0 calc((100% / #{$columns} * #{$i}) + #{$space});
    max-width: calc((100% / #{$columns} * #{$i}) + #{$space});
  }
}

//grid queries
@mixin grid-query($tag, $values, $type) {
  $columns: map-get($values, columns);
  $space: map-get($values, space);
  $tags: map-get($values, tags);
  $i: index(map-keys($tags), $tag);

  .clefs:not(.-claviers) {
    //widths specifics
    @for $i from 1 through $columns {
      @include grid-style($tag, $i, $columns, $space, $type);
    }
  }
}

//get queries between
@mixin grids-between($name, $tags) {
  $next: getNextQuery($name, map-keys($tags));

  @if( $next ) {
    @include query-between($name, $next, $tags) {
      @content;
    }
  }@else{
    @include query-min($name, $tags) {
      @content;
    }
  }
}
@mixin grids-min($name, $tags) {
  @include query-min($name, $tags) {
    @content;
  }
}
@mixin grids-max($name, $tags) {
  @include query-max($name, $tags) {
    @content;
  }
}

//type grids
@mixin grids-type($name, $tags, $type: false) {
  @if not($type) {
    @include grids-between($name, $tags) {
      @content;
    }
  }@elseif($type == "lesser") {
    @include grids-min($name, $tags) {
      @content;
    }
  }@elseif($type == "greater") {
    @include grids-max($name, $tags) {
      @content;
    }
  }@else{
    @error "Grids type undefined!";
  }
}

//aply grids
@mixin aply-grids($values, $type: false) {
  $tags: map-get($values, tags);
  $tags: mapSort($tags, map-values($tags));
  @each $tag in map-keys($tags) {
    @include grids-type($tag, $tags, $type) {
      @include grid-query($tag, $values, $type);
    }
  }
}
// /MIXINS GRID
