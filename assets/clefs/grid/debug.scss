@mixin debug($space) {
  /*DEBUG*/
  [clefs-debug] {
    position: relative;

    //box error message
    &:before {
      content: "No problem found.";
      background: $success-color;
      min-width: 100px;
      position: absolute;
      color: #fff;
      border-radius: 3px;
      padding: 3px 5px;
      display: block;
      z-index: 999;
    }
  }

  //positions box
  .clefs:not(.-nospace) > .clefs:matches(.clef, [class*="clef-"]) {
    &:before {
      width: calc(100% - #{$space * 2.5});
      top: $space;
      left: $space;
    }
  }
  .clefs.-nospace > :matches(.clefs, .clef, [class*="clef-"]),
  .clefs:not(.-nospace) > :not(.clefs):matches(.clef, [class*="clef-"]) {
    &:before {
      width: calc(100% - #{$space * 1.5});
      top: $space / 2;
      left: $space / 2;
    }
  }
  :not(.clefs) > :not(.clefs):matches(.clef, [class*="clef-"]) {
    &:before {
      width: 100%;
      top: 0;
      left: 0;
    }
  }

  //.-claviers + .-score
  [clefs-debug].-claviers.-score {
    &:before {
      content: "Warning! The use of the .-claviers and .-score in the same selector can cause layout problems.";
      background: $warning-color;
    }
  }

  //.clef + .clef-*
  [clefs-debug].clef[class*="clef-"] {
    &:before {
      content: "Notice! The use of the .clef and .clef-* in the same selector isn't necessary.";
      background: $info-color;
    }
  }

  //.order + .in-first/.in-last
  [clefs-debug][class*="order-"]:matches(.in-first, .in-last) {
    &:before {
      content: "Notice! The use of the .order- * and .in-first / .in-last classes in the same selector can generate conflict between them.";
      background: $info-color;
    }
  }

  //not .clefs > .clef
  :not(.clefs) > [clefs-debug]:not(.clefs):matches(.clef, [class*="clef-"]) {
    &:before {
      content: "Danger! The .clef/.clef-* classes must be direct children of a .clefs class.";
      background: $danger-color;
    }
  }
  /* /DEBUG*/
}
